py.test test_sample.py --collect-only   # собирает набор тестов информации

py.test test_sample.py -v   # выводит подробные сообщения

py.test -q test_sample.py   # пропустить вывод имени файла

python -m pytest -q test_sample.py   # вызов pytest через python

py.test --markers   # показать доступные маркеры

# Для того, чтобы создать многоразовый маркер.
/ *
# содержимое pytest.ini
[pytest]
маркеры =
    webtest: пометить тест как веб-тест.
* /

py.test -k " TestClass and not test_one "   # запускать только тесты с именами, соответствующими "строковому выражению"

py.test test_server.py::TestClass::test_method   # запускать только тесты, соответствующие идентификатору узла

py.test -x   # остановка после первой неудачи

py.test --maxfail=2   # остановка после двух сбоев

py.test --showlocals   # показать локальные переменные в обратных трассировках
py.test -l   # (ярлык)

py.test --tb=long   # форматирование информативной трассировки по умолчанию
py.test --tb=native   # форматирование стандартной библиотеки Python
py.test --tb=short   # более короткий формат трассировки
py.test --tb=line   # только одна строка на каждую ошибку
py.test --tb=no   # нет вывода трассировки

py.test -x --pdb # перенести в PDB при первом сбое, затем завершить сеанс тестирования

py.test --durations=10   # список из 10 самых медленных тестов продолжительности.

py.test --maxfail=2 -rf   # выйти после двух сбоев, сообщить информацию о сбое.

py.test -n 4   # отправить тесты на несколько процессоров

py.test -m медленный   # запуск тестов с декоратором @pytest.mark.slowest или медленный = pytest.mark.slowest; @самый медленный

py.test --traceconfig   # выясните, какие плагины py.test активны в вашей среде.

py.test --instafail   # если установлен pytest-instafail, отображать ошибки и сбои мгновенно, не дожидаясь окончания набора тестов.

# Тестирование с использованием параметризации
/ *
    импортировать pytest


    @pytest.mark.parameterize(
        ( ' n ' , ' ожидается ' ), [
            (1, 2),
            (2, 3),
            (3, 4),
            (4, 5),
            pytest.mark.xfail (( 1 ,  0 )) ,
            pytest.mark.xfail(reason= " какая-то ошибка " ) (( 1 ,  0 )) ,
            pytest.mark.skipif( ' sys.version_info >= (3,0) ' ) (( 10 ,  11 )) ,
        ]
    )
    def test_increment(n, ожидается):
        утверждать n + 1 == ожидается
* /
